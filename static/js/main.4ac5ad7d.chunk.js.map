{"version":3,"sources":["components/modal.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["Modal","props","activityData","onClose","showCalendar","className","length","map","item","index","moment","start_time","format","end_time","onClick","List","useState","usersData","setUserData","isVisible","setModalVisible","setActivityData","activeDate","setDate","isCalendarVisible","toggleCalendar","useEffect","loadData","a","fetch","response","json","data","members","toggleModal","Date","activity_periods","real_name","value","onChange","val","newData","filter","maxDate","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRA8CeA,EA1CD,SAACC,GAAW,IAChBC,EAAwCD,EAAxCC,aAAcC,EAA0BF,EAA1BE,QAASC,EAAiBH,EAAjBG,aAE/B,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,SACb,wBAAIA,UAAU,WAAd,QACA,wBAAIA,UAAU,WAAd,SACA,wBAAIA,UAAU,WAAd,OACCH,EAAaI,OAAS,EACrBJ,EAAaK,KAAI,SAACC,EAAMC,GACtB,OACE,oCACE,wBAAIJ,UAAU,eACXK,IAAOF,EAAKG,WAAY,wBAAwBC,OAC/C,gBAGJ,wBAAIP,UAAU,eACXK,IAAOF,EAAKG,YAAYC,OAAO,OAElC,wBAAIP,UAAU,eACXK,IAAOF,EAAKK,UAAUD,OAAO,WAMtC,oCACE,8BACA,6CACA,gCAIN,yBAAKP,UAAU,OACb,4BAAQS,QAASX,EAASE,UAAU,OAApC,SACA,4BAAQS,QAASV,EAAcC,UAAU,OAAzC,e,QCsCOU,G,MAvEF,WACX,IADiB,EAIgBC,mBAAS,IAJzB,mBAIVC,EAJU,KAICC,EAJD,OAKoBF,oBAAS,GAL7B,mBAKVG,EALU,KAKCC,EALD,OAMuBJ,mBAAS,IANhC,mBAMVd,EANU,KAMImB,EANJ,OAOaL,qBAPb,mBAOVM,EAPU,KAOEC,EAPF,OAQ2BP,oBAAS,GARpC,mBAQVQ,EARU,KAQSC,EART,KAajBC,qBAAU,WACRC,MACC,IACH,IAAMA,EAAQ,uCAAG,8BAAAC,EAAA,sEACQC,MAfvB,uEAce,cACTC,EADS,gBAEIA,EAASC,OAFb,OAETC,EAFS,OAGfd,EAAYc,EAAKC,SAHF,2CAAH,qDAKRC,EAAc,SAAC1B,GACnBe,EAAQ,IAAIY,MACZf,GAAiBD,GACjBM,GAAe,GAEfJ,EAAgBb,EAAK4B,mBAgBvB,OACE,yBAAK/B,UAAU,OACZY,EAAUV,KAAI,SAACC,EAAMC,GACpB,OACE,4BAAQK,QAAS,kBAAMoB,EAAY1B,IAAOH,UAAU,UAAUG,EAAK6B,cAItElB,GACC,kBAAC,EAAD,CACEhB,QAAS+B,EACThC,aAAcA,EACdE,aA5Ca,WACnBqB,GAAgBD,MA+CbA,GACC,kBAAC,IAAD,CACEc,MAAOhB,EACPiB,SAjCa,SAACC,GACpBjB,EAAQiB,GACR,IAAMC,EAAUvC,EAAawC,QAAO,SAAClC,EAAMC,GACzC,GACEC,IAAOF,EAAKG,YAAYC,OAAO,gBAC/BF,IAAO8B,GAAK5B,OAAO,cAEnB,OAAOJ,KAIXa,EAAgBoB,GAChBhB,GAAe,IAsBTkB,QAAS,IAAIR,KACb9B,UAAU,gBC1DLuC,MATf,WAEE,OACE,6BACC,kBAAC,EAAD,QCIeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4ac5ad7d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\nimport moment from \"moment\";\n\nconst Modal = (props) => {\n  const { activityData, onClose, showCalendar } = props;\n\n  return (\n    <div className=\"main\">\n      <div className=\"modal\">\n        <h1 className=\"heading\">Date</h1>\n        <h1 className=\"heading\">Start</h1>\n        <h1 className=\"heading\">End</h1>\n        {activityData.length > 0 ? (\n          activityData.map((item, index) => {\n            return (\n              <>\n                <h1 className=\"sub-heading\">\n                  {moment(item.start_time, \"YYYY-MM-DDTHH:mm:ssZ\").format(\n                    \"MMM Do YYYY\"\n                  )}\n                </h1>\n                <h1 className=\"sub-heading\">\n                  {moment(item.start_time).format(\"LT\")}\n                </h1>\n                <h1 className=\"sub-heading\">\n                  {moment(item.end_time).format(\"LT\")}\n                </h1>\n              </>\n            );\n          })\n        ) : (\n          <>\n            <div></div>\n            <h1>No data found</h1>\n            <div></div>\n          </>\n        )}\n      </div>\n      <div className=\"row\">\n        <button onClick={onClose} className=\"btn\">Close</button>\n        <button onClick={showCalendar} className=\"btn\">Calendar</button>\n      </div>\n    </div>\n  );\n};\nexport default Modal;\n","import React, { useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport Modal from \"./modal\";\nimport Calendar from \"react-calendar\";\nimport 'react-calendar/dist/Calendar.css';\nimport moment from \"moment\";\n\n\nconst List = () => {\n  const API_URL =\n    \"https://ff4e1821-eb00-4eeb-98c9-6fc4e3234140.mock.pstmn.io/activity\";\n\n  const [usersData, setUserData] = useState([]);\n  const [isVisible, setModalVisible] = useState(false);\n  const [activityData, setActivityData] = useState([]);\n  const [activeDate, setDate] = useState();\n  const [isCalendarVisible, toggleCalendar] = useState(false);\n\n  const showCalendar = () => {\n    toggleCalendar(!isCalendarVisible);\n  };\n  useEffect(() => {\n    loadData();\n  }, []);\n  const loadData = async () => {\n    const response = await fetch(API_URL);\n    const data = await response.json();\n    setUserData(data.members);\n  };\n  const toggleModal = (item) => {\n    setDate(new Date());\n    setModalVisible(!isVisible);\n    toggleCalendar(false);\n\n    setActivityData(item.activity_periods);\n  };\n  const onDateChange = (val) => {\n    setDate(val);\n    const newData = activityData.filter((item, index) => {\n      if (\n        moment(item.start_time).format(\"MM DD YYYY\") ===\n        moment(val).format(\"MM DD YYYY\")\n      ) {\n        return item;\n      }\n      return;\n    });\n    setActivityData(newData);\n    toggleCalendar(false);\n  };\n  return (\n    <div className=\"App\">\n      {usersData.map((item, index) => {\n        return (\n          <button onClick={() => toggleModal(item)} className=\"rowBtn\">{item.real_name}</button>\n        );\n      })}\n\n      {isVisible && (\n        <Modal\n          onClose={toggleModal}\n          activityData={activityData}\n          showCalendar={showCalendar}\n        />\n      )}\n\n      {isCalendarVisible && (\n        <Calendar\n          value={activeDate}\n          onChange={onDateChange}\n          maxDate={new Date()}\n          className=\"calendar\"\n        \n        />\n      )}\n    </div>\n  );\n};\n\nexport default List;\n","import React from \"react\";\nimport List from './components/List';\n\n\nfunction App() {\n \n  return (\n    <div>\n     <List/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}